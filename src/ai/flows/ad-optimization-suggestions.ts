// src/ai/flows/ad-optimization-suggestions.ts
'use server';

/**
 * @fileOverview Provides AI-powered suggestions for optimizing article content to improve ad performance.
 *
 * - getAdOptimizationSuggestions - A function that generates suggestions for improving content to maximize ad revenue.
 * - AdOptimizationSuggestionsInput - The input type for the getAdOptimizationSuggestions function.
 * - AdOptimizationSuggestionsOutput - The return type for the getAdOptimizationSuggestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AdOptimizationSuggestionsInputSchema = z.object({
  articleContent: z
    .string()
    .describe('The content of the article to be optimized.'),
  viewabilityData: z
    .string()
    .optional()
    .describe('Data about the article viewability (e.g., average time on page, bounce rate).'),
  userEngagementData: z
    .string()
    .optional()
    .describe('Data about user engagement with the article (e.g., comments, shares, likes).'),
  adRevenueData: z
    .string()
    .optional()
    .describe('Data about the ad revenue generated by the article.'),
});
export type AdOptimizationSuggestionsInput = z.infer<
  typeof AdOptimizationSuggestionsInputSchema
>;

const AdOptimizationSuggestionsOutputSchema = z.object({
  suggestions: z
    .array(z.string())
    .describe('A list of suggestions for optimizing the article content to improve ad performance.'),
  explanation: z
    .string()
    .describe('An explanation of why the suggestions were made.'),
});
export type AdOptimizationSuggestionsOutput = z.infer<
  typeof AdOptimizationSuggestionsOutputSchema
>;

export async function getAdOptimizationSuggestions(
  input: AdOptimizationSuggestionsInput
): Promise<AdOptimizationSuggestionsOutput> {
  return adOptimizationSuggestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'adOptimizationSuggestionsPrompt',
  input: {schema: AdOptimizationSuggestionsInputSchema},
  output: {schema: AdOptimizationSuggestionsOutputSchema},
  prompt: `You are an expert in optimizing content for ad performance. Based on the article content and the provided data about viewability, user engagement, and ad revenue, provide suggestions for improving the content to maximize ad revenue.

Article Content:
{{articleContent}}

Viewability Data:
{{viewabilityData}}

User Engagement Data:
{{userEngagementData}}

Ad Revenue Data:
{{adRevenueData}}

Suggestions:
`, // The LLM should provide output in the form of a list of suggestions, numbered, with an explanation after the numbered list. Example: "1. Add more images to the article to increase viewability.\n2. Include a call to action to encourage user engagement.\n\nExplanation: The suggestions are based on the provided data about viewability, user engagement, and ad revenue.  Articles with images and calls to action tend to have higher viewability and user engagement, which can lead to increased ad revenue."
});

const adOptimizationSuggestionsFlow = ai.defineFlow(
  {
    name: 'adOptimizationSuggestionsFlow',
    inputSchema: AdOptimizationSuggestionsInputSchema,
    outputSchema: AdOptimizationSuggestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
